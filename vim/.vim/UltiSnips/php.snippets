priority -50

global !p
import vim

_underscorer1 = re.compile(r'(.)([A-Z][a-z]+)')
_underscorer2 = re.compile('([a-z0-9])([A-Z])')

# Set g:ultisnips_php_scalar_types to 1 if you'd like to enable PHP 7's scalar types for return values
def isPHPScalarTypesEnabled():
    isEnabled = vim.eval("get(g:, 'ultisnips_php_scalar_types', 0)") == "1"
    return isEnabled or re.match('<\?php\s+declare\(strict_types=[01]\);', '\n'.join(vim.current.window.buffer))

def mixedCase(word):
    if not word: return ''
    return word[0].lower() + word[1:]

def camelToSnake(s):
    subbed = _underscorer1.sub(r'\1_\2', s)
    return _underscorer2.sub(r'\1_\2', subbed).lower()

endglobal

snippet propdb "protected property" bm
/**
 * ${1}
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  ${6:#.#.#} (${7:`date +%Y-%m-%d`})
 *
 * @var ${2:string}
 *
 * ${5:@ORM\Column(type="string", name="${3:`!p snip.rv =camelToSnake(t[1])`}")}
 */
protected $$1;
endsnippet

snippet gm "PHP Class Getter" b
/**
 * Get $1
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  ${6:#.#.#} (${7:`date +%Y-%m-%d`})
 *
 * @return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}(): $2
{
    return $this->$1;
}
endsnippet

snippet sm "PHP Class Setter" b
/**
 * Set $1
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  ${6:#.#.#} (${7:`date +%Y-%m-%d`})
 *
 * @param ${2:string} $$1
 *
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${4:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1): $3
{
    $this->$1 = $$1;

    ${5:return $this;}
}
endsnippet

snippet gs "PHP Class Setter Getter" bm
/**
 * Set ${1:property}
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  ${6:#.#.#} (${7:`date +%Y-%m-%d`})
 *
 * @param ${2:string} $${12:`!p snip.rv = mixedCase(re.sub(r"\s", "", ''.join(word[0].upper() + word[1:] for word in t[1].split())))`}
 *
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${12/\w+\s*/\u$0/}($2 $$12): $3
{
    $this->$12 = $$12;

    return ${5:$this;}
}

/**
 * Get $1
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  $6 ($7)
 *
 * @return $2
 */
public function get${12/\w+\s*/\u$0/}(): $2
{
    return $this->$12;
}
endsnippet

snippet pub "Public function" b
/**
 * ${3:undocumented function}
 *
 * @param ${5:string} $$2
 *
 * @return ${4:void}
 */
public function ${1:name}(${2:$param})
{
    ${VISUAL}${5:return null;}
}
$0
endsnippet

snippet gsst "Simple test for getter and setters" bm
/**
 * Test ${1}
 *
 * @author Christopher Tatro <ctatro@janeiredale.com>
 * @since  ${6:#.#.#} (`date +%Y-%m-%d`)
 */
public function test${12:`!p snip.rv = (re.sub(r"\s", "", ''.join(word[0].upper() + word[1:] for word in t[1].split())))`}()
{
    $${8:`!p snip.rv=re.sub(r"test$","", snip.basename.lower())`} = new `!p snip.rv=string.capwords(t[8])`(${4});

    $$8->set$12('${5:Something}');

    $this->assertEquals('$5', $$8->get$12());
}
endsnippet

snippet '''' "Auto expand array row" mb
'${1:some value}' => '${2:$1}',
endsnippet

snippet @since "Gets current date" bm
* @since  #.#.# (`date +%Y-%m-%d`)
endsnippet
